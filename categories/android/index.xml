<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on Syschar&#39;s blog</title>
    <link>https://example.com/categories/android/</link>
    <description>Recent content in Android on Syschar&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 12 Feb 2022 17:19:57 +0800</lastBuildDate><atom:link href="https://example.com/categories/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Android--布局</title>
      <link>https://example.com/p/android-%E5%B8%83%E5%B1%80/</link>
      <pubDate>Sat, 12 Feb 2022 17:19:57 +0800</pubDate>
      
      <guid>https://example.com/p/android-%E5%B8%83%E5%B1%80/</guid>
      <description>LinearLayout&amp;ndash;线性布局 orientation 布局中组件的排列方式（默认是横向排列） gravity 控制组件的子元素的对齐方式（默认靠左靠上对齐） background 设置背景（纯色或图片） divider 分割线 showDividers 设置分割线位置 dividerPadding 设置分割线的padding layout_gravity 控制组件在父容器中的对齐方式 layout_weight 用于按权重比划分父容器剩余空白区域，如果子布局所需要的控件超过了父布局将按权重比裁剪空间  RelativeLayout&amp;ndash;相对布局 默认相对左上角进行布局，默认情况下，子部件会彼此重合 根据父容器进行定位 layout_alignParentLeft 左对齐 layout_alignParentRight 右对齐 layout_alignParentTop 顶部对齐 layout_alignParentBottom 底部对齐 layout_centerHorizontal 水平居右 layout_centerInParent 垂直居中 layout_centerVertical 中间位置 根据兄弟组件进行定位 layout_toLeftOf 放在参考组件左侧 layout_toRightOf 放在参考组件右侧 layout_above 放在参考组件上方 layout_below 放在参考组件下方 layout_alignTop 对齐参考组件的上边界 layout_alignBottom 对齐参考组件的下边界 layout_alignLeft 对齐参考组件的左边界 layout_alignRight 对齐参考组件的右边界 设置组件与父容器之间的间距 layout_margin 距离父容器上下左右边界的距离（优先满足左上的距离要求） layout_marginLeft layout_marginRight layout_marginTop layout_marginBottom padding 设置组件内部的元素与组件边距  FrameLayout&amp;ndash;框架布局（从左上角开始依次覆盖绘制组件） android:foreground 设置前景（用图片或者纯色覆盖组件） android:foregroundGravity 设置前景的位置  TableLayout&amp;ndash;表格布局 控件占据一行的大小 如果要划分一行内部的空间，需要用&amp;lt;TableRow&amp;gt;.</description>
    </item>
    
    <item>
      <title>Android--控件</title>
      <link>https://example.com/p/android-%E6%8E%A7%E4%BB%B6/</link>
      <pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/p/android-%E6%8E%A7%E4%BB%B6/</guid>
      <description>控件所有的属性不仅可以在xml文件中进行配置，也可以在在Java代码中设置。
所有控件的属性有自己默认值。
xml文件相当于一份构造表（类似对象的构造器），在app启动时加载xml文件初始化控件的相关属性。
Java代码中进行的设置会在程序运行时对控件进行更改，所以Java的修改会覆盖掉xml中的启动设置。
TextView 控件大小 android:layout_width=&amp;quot;200dp&amp;quot; 控件宽度 android:layout_height=&amp;quot;200dp&amp;quot; 控件高度 android:gravity=&amp;quot;center&amp;quot; 内容放置位置  内容文本 android:text=&amp;quot;@string/text_2&amp;quot; 文本内容 android:textColor=&amp;quot;@color/black&amp;quot; 文本颜色 android:textSize=&amp;quot;50sp&amp;quot; 字体大小 android:textStyle=&amp;quot;bold&amp;quot; 字体加粗、斜体  文本阴影效果 android:shadowColor=&amp;quot;@color/red&amp;quot; 阴影颜色 android:shadowDx=&amp;quot;10&amp;quot; 阴影横向偏移 android:shadowDy=&amp;quot;10&amp;quot; 阴影纵向偏移 android:shadowRadius=&amp;quot;10.0&amp;quot; 阴影透明度  走马灯效果 android:singleLine=&amp;quot;true&amp;quot; 文本限制为一行显示 android:ellipsize=&amp;quot;marquee&amp;quot; 在哪里省略文本 android:focusable=&amp;quot;true&amp;quot; 获取焦点 android:focusableInTouchMode=&amp;quot;true&amp;quot; 在触摸时聚焦 android:marqueeRepeatLimit=&amp;quot;marquee_forever&amp;quot; 效果的持续次数 &amp;lt;requestFocus /&amp;gt; 放于末尾，在程序启动时启动走马灯效果  Button 控件大小以及内容文本效果都与TextView相同 android:layout_width=&amp;quot;200dp&amp;quot; android:layout_height=&amp;quot;100dp&amp;quot; android:gravity=&amp;quot;center&amp;quot;  按钮背景及颜色 android:backgroundTint=&amp;quot;@color/btn_color_selector&amp;quot; android:background=&amp;quot;@drawable/btn_selector&amp;quot;   在res资源文件夹下创建一个color文件夹，创建Resource文件btn_color_selector.xml用于存储按钮的颜色变化
 &amp;lt;item android:color=&amp;quot;@color/red&amp;quot; android:state_pressed=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;item android:color=&amp;quot;@color/black&amp;quot;/&amp;gt;   在res中的drawable中创建Resource文件btn_selector.xml文件存放按钮背景的变化</description>
    </item>
    
  </channel>
</rss>
